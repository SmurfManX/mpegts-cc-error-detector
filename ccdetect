import socket
import struct
import argparse
import datetime
from threading import Timer

# Argument parser
parser = argparse.ArgumentParser(description='UDP multicast continuity count detector')
parser.add_argument('multicast_group', type=str, help='Multicast IP:Port')
args = parser.parse_args()

# Extract IP and Port from the argument
MULTICAST_IP, MULTICAST_PORT = args.multicast_group.split(':')

# Set the multicast group address and port
MULTICAST_GROUP = (MULTICAST_IP, int(MULTICAST_PORT))

# Create the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)

# Allow multiple sockets to use the same PORT number
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

# Bind to the port
sock.bind(MULTICAST_GROUP)

# Tell the operating system to add the socket to the multicast group
# on all interfaces.
group = socket.inet_aton(MULTICAST_GROUP[0])
mreq = struct.pack('4sL', group, socket.INADDR_ANY)
sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)

# Initialize the continuity count dictionary
continuity_counts = {}

# Initialize packet counters
packet_received = 0
packet_lost = 0

# Function to print lost packet percentage every second
def print_packet_loss():
    global packet_received, packet_lost

    if packet_received > 0:
        packet_loss_percent = (packet_lost / packet_received) * 100000
    else:
        packet_loss_percent = 0

    current_time = datetime.datetime.now().strftime('%H:%M:%S')

    print(f'{current_time} {packet_loss_percent:.2f}%')

    # Reset counters
    packet_received = 0
    packet_lost = 0

    # Start the timer again
    Timer(1, print_packet_loss).start()

# Start the timer
print_packet_loss()

# Loop, printing any data we receive

while True:
    data, _ = sock.recvfrom(10240)  # 10240 is a buffer size

    # Assuming the data is MPEG2 TS packets, each packet is 188 bytes
    for i in range(0, len(data), 188):
        packet = data[i:i+188]

        # The PID is a 13-bit field that starts 11 bits from the start of the packet
        pid = struct.unpack('>H', packet[1:3])[0] & 0x1fff

        # The continuity count is the last 4 bits of the packet
        continuity_count = packet[3] & 0x0f

        # The adaptation field control is in the fourth byte, bits 5 and 4
        adaptation_field_control = (packet[3] & 0x30) >> 4

        # Increment packet received count
        packet_received += 1

        # Check if the count has incremented by one or if it has wrapped around to 0 from 15
        if pid in continuity_counts and continuity_counts[pid] not in [(continuity_count - 1) % 16, (continuity_count + 15) % 16] and adaptation_field_control in [0b11, 0b10]:

            # Increment packet lost count
            packet_lost += 1

        # Update the continuity count for this PID
        continuity_counts[pid] = continuity_count
